[ { "title": "PROGRESSBAR", "url": "/VORP_API-docs/posts/progressbar/", "categories": "Documentation Lua, PROGRESSBAR", "tags": "Lua, UI", "date": "2022-07-20 19:24:00 +0100", "snippet": "VORP ProgressBar A client side UI progressbar that allows you to display brogress bars/circles within your scripts!How to useCan only be used from client side Initiate the progress bar globally progressbar = exports.vorp_progressbar:initiate()Start your progress UI progressbar.start(message, time, callback, theme)Input Parameters| Input | Info ||‚Äì|‚Äì|| message | What you want the progress to display || time | how long the progress should display (in milliseconds) || callback | function that will get called when the progress is done || theme | What you want the progress bar/circle to look like |Theme Options| Option | Info ||‚Äì|‚Äì|| linear | Shows a linear progress flat bar || circle | Shows a circle progress bar || innercircle | Shows a circle progress bar with a seconds countdown in the middle |Example: progressbar.start('Loading Example\", 20000, function () print('DONE!!!!') end, 'linear')" }, { "title": "INTRO", "url": "/VORP_API-docs/posts/intro/", "categories": "1- INTRODUCTION", "tags": "VORP introduction", "date": "2022-05-15 15:55:00 +0100", "snippet": "VORP framework was made by the communitty on their free time to create RedM roleplay servers based on the RDR2 gameit is also the Lead framework in RedM for creating RP servers.GETTING STARTED!!REQUIRMENTS TO RUN A VORP SERVERInstall the following RDR2 or RDO both works for RedM login to steam login to rockstars launcher all the time RDO its cheaper!Download the following XAMPP For connecting to the databse HEIDI SQL to manage the databse mysql is not supported MARAIA DB is what we supportHOSTING YOUR SERVER choose a Windows VPS to host your server. GOOGLE IT if intrested to have your vps service here contact us we support only WINDOWS linux is not supportedINSTALLATION A premade server can be found bellow this is not made by vorp and does not belong to vorp. downloadCONFIGURATION &amp; PERMISSIONSEdit the server.cfg found at üìÅserver/server.cfg sv_licenseKey \"\" steam_webApiKey \"\" sv_hostname \"my server\" sv_projectDesc \"my project\" sv_maxclients 48 --with onesync on Permissions &amp; TX Admin open xampp and turn on the first 2 options run with HeidiSQL the SQL file database.sql found in the directory of the premade server create where it says New any name you want then run the file ignore the warnings! go to üìÅCFX-files folder download the artifcats and extract inside the same üìÅfolder start FXServer.exe and it will open a web browser to install TX admin follow the options. and your server should start join your server then leave again go to HeidiSQL again, open characters table go to group and change your CHAR from users to admin same to users table so that you have admin perms in game done your server is installed NOTE: some of the plug-ins from the premade are not updated make sure to check VORP GitHub to update them.DISCLAIMER VORP does not guarantee any support or that any script will workUPDATING RESOURCES todoUse of GitHub todo todo todo" }, { "title": "VORP CORE", "url": "/VORP_API-docs/posts/core-lua/", "categories": "Documentation Lua, CORE", "tags": "Lua", "date": "2022-05-15 04:33:00 +0100", "snippet": "VORP core is the master tool for all your projectsHow to useCore API-- at the top of your server side fileslocal VORPcore = {}TriggerEvent(\"getCore\", function(core) VORPcore = coreend) The same Event can be called from client side to use for with the functions below for Notifications for CallBacks Hide or show CORE UI -- from server side local _source = source TriggerClientEvent(\"vorp:showUi\", _source, false) --hide -- from client side TriggerEvent(\"vorp:showUi\", true) --showExamples API for notifications client side----------------------------------- at the top of your client sidelocal VORPcore = {}TriggerEvent(\"getCore\", function(core) VORPcore = coreend)VORPcore.NotifyTip(\"title\",4000)VORPcore.NotifyLeft(\"title\",\"subtitle\",\"dict\",\"icon\",4000,\"color\")VORPcore.NotifyRightTip(\"title\",4000)VORPcore.NotifyObjective(\"title\",4000)VORPcore.NotifyTop(\"title\",\"location\",4000)VORPcore.NotifySimpleTop(\"title\",\"subtitle\",4000)VORPcore.NotifyAvanced(\"title\",\"dict\",\"icon\",\"color\",4000)VORPcore.NotifyCenter(\"title\",4000)VORPcore.NotifyBottomRight(\"title\",4000)VORPcore.NotifyFail(\"title\",\"subtitle\",4000)VORPcore.NotifyDead(\"title\",\"audioref\",\"\"audioname\"\",4000)VORPcore.NotifyUpdate(\"title\",\"subtitle\",4000)VORPcore.NotifyWarning(\"title\",\"subtitle\",\"audioref\",\"\"audioname\"\",4000) Server side --------------------------------- -- at the top of your client side local VORPcore = {} TriggerEvent(\"getCore\", function(core) VORPcore = core end) local _source = source -- player source VORPcore.NotifyTip(_source,\"title\",4000) VORPcore.NotifyLeft(_source,\"title\",\"subtitle\",\"dict\",\"icon\",4000,\"color\") VORPcore.NotifyRightTip(_source,\"title\",4000) VORPcore.NotifyObjective(_source,\"title\",4000) VORPcore.NotifyTop(_source,\"title\",\"location\",4000) VORPcore.NotifySimpleTop(_source,\"title\",\"subtitle\",4000) VORPcore.NotifyAvanced(_source,\"title\",\"dict\",\"icon\",\"color\",4000) VORPcore.NotifyCenter(_source,\"title\",4000) VORPcore.NotifyBottomRight(_source,\"title\",4000) VORPcore.NotifyFail(_source,\"title\",\"subtitle\",4000) VORPcore.NotifyDead(_source,\"title\",\"audioref\",\"audioname\",4000) VORPcore.NotifyUpdate(_source,\"title\",\"subtitle\",4000) VORPcore.NotifyWarning(_source,\"title\",\"subtitle\",\"audioref\",\"audioname\",4000)Server API Get max characters-- at the top of the server filelocal VORPcore = {}TriggerEvent(\"getCore\", function(core) VORPcore = coreend)-- this returns a numberlocal maxChars = VORPcore.maxCharacters Get Users data-- at the top of the server filelocal VORPcore = {}TriggerEvent(\"getCore\", function(core) VORPcore = coreend)local _source = source-- contains functions and information from all characterslocal User = VORPcore.getUser(_source)-- Return user group (not character group)local UserGroup = User.getGroup -- Return character selected by userlocal Character = User.getUsedCharacter -- orlocal Character = VORPcore.getUser(_source).getUsedCharacter--Data you can getCharacter.identifierCharacter.charIdentifierCharacter.groupCharacter.jobCharacter.jobGradeCharacter.moneyCharacter.goldCharacter.rolCharacter.xpCharacter.firstnameCharacter.lastnameCharacter.statusCharacter.coordsCharacter.isdeadCharacter.skinCharacter.comps Set functions-- at the top of the server filelocal VORPcore = {}TriggerEvent(\"getCore\", function(core) VORPcore = coreend)local _source = sourcelocal Character = VORPcore.getUser(_source).getUsedCharacter--Functions you can set using the APICharacter.setJob(\"miner\")Character.setJobGrade(1)Character.setGroup(\"admin\")Character.setMoney(1000.50)Character.setGold(1000.20)Character.setRol(1000)Character.setXp(5000)Character.setFirstname(\"Sadie\")Character.setLastname(\"Adler\")Character.updateSkin(\"need comps in json\")Character.updateComps(\"need comps in json\")Character.addCurrency(0, 1000) -- Add money 1000 | 0 = money, 1 = gold, 2 = rolCharacter.removeCurrency(0, 1000) -- Remove money 1000 | 0 = money, 1 = gold, 2 = rolCharacter.addXp(100)Character.removeXp(100)Instance Players uising routing buckets can only be used from client side only-- client side onlylocal VORPcore = {}TriggerEvent(\"getCore\", function(core) VORPcore = coreend)-- to add a players to different instances use his server id + instance number-- to add players to same instance use only the instanceNumberlocal instanceNumber = 54123 -- any numberVORPcore.instancePlayers(tonumber(GetPlayerServerId(PlayerId()))+ instanceNumber)-- to remove the player from instanceVORPcore.instancePlayers(0) WHITELIST API get data from white list table-- SERVER SIDE ONLYlocal VORPWhitelist = {}TriggerEvent(\"getWhitelistTables\", function(cb) VORPWhitelist = cbend)-- userStaticID this is a static ID used to whitelist/unwhitelist or ban/unban-- needs identifierlocal getid = VORPwl.getEntry(identifier).getId() -- whitelisted returns true or false-- needs identifierlocal getstatus = VORPwl.getEntry(identifier).getStatus() --get players warnings-- use the API core to get source datalocal _source = source local User = VorpCore.getUser(_source)local warnstatus = User.getPlayerwarnings() AUTO DB updater you can use this API to create tables or add columns to DB instead of an sql file or for future updates it will check once if they exist once ran Server side ony-- top at server sidelocal VORPcore = {}TriggerEvent(\"getCore\", function(core) VORPcore = coreend)-- example of how to create tables-- it only does this oncelocal Tables = { { name = \"loadout\", script = \"vorp_inventory\", sql = [[ CREATE TABLE IF NOT EXISTS `loadout` ( `id` INT(11) NOT NULL AUTO_INCREMENT, `identifier` VARCHAR(50) NOT NULL, `charidentifier` INT(11) NULL, `name` VARCHAR(50) NULL DEFAULT NULL, `ammo` VARCHAR(255) NOT NULL DEFAULT '{}', `components` VARCHAR(255) NOT NULL DEFAULT '[]', `dirtlevel` DOUBLE NULL DEFAULT 0, `mudlevel` DOUBLE NULL DEFAULT 0, `conditionlevel` DOUBLE NULL DEFAULT 0, `rustlevel` DOUBLE NULL DEFAULT 0, `used` TINYINT(4) NULL DEFAULT 0, PRIMARY KEY (`id`), INDEX `id` (`id`) ) COLLATE='utf8mb4_general_ci' ENGINE=InnoDB AUTO_INCREMENT=2; ]] }, { name = \"items\", script = \"vorp_inventory\", sql = [[ CREATE TABLE IF NOT EXISTS `items` ( `item` VARCHAR(50) NOT NULL, `label` VARCHAR(50) NOT NULL, `limit` INT(11) NOT NULL DEFAULT 1, `can_remove` TINYINT(1) NOT NULL DEFAULT 1, `type` VARCHAR(50) NULL DEFAULT NULL, `usable` TINYINT(1) NULL DEFAULT NULL, PRIMARY KEY (`item`) USING BTREE ) COLLATE='utf8mb4_general_ci' ENGINE=InnoDB ROW_FORMAT=DYNAMIC; ]] }}-- example on how to create a missing columns in Tableslocal Updates = { { name = \"dropped\", script = \"vorp_inventoryv\", find = [[ select * from Information_Schema.Columns where Table_Name = 'loadout' AND Column_Name = 'dropped'; ]], sql = [[ ALTER TABLE `loadout` ADD COLUMN `dropped` INT(11) NOT NULL DEFAULT 0; ]] }, { name = \"desc\", script = \"vorp_inventoryv\", find = [[ select * from Information_Schema.Columns where Table_Name = 'items' AND Column_Name = 'desc'; ]], sql = [[ ALTER TABLE `items` ADD COLUMN `desc` VARCHAR(5550) NOT NULL DEFAULT 'nice item'; ]] }}-- DB UpdaterCitizen.CreateThread(function() VORPcore.dbUpdateAddTables(Tables) VORPcore.dbUpdateAddUpdates(Updates)end)API for webhooks from client or server side send a webhook to your discordVorpCore.AddWebhook(title, webhook, description, color, name, logo, footerlogo, avatar) Parameter Type Description Required ? title String title of webhhok True webhhok String link of the channel webhook True description String description of the action logged True color number color of the embed false name string name of the webhook false logo string link of the image false footerlogo string link of the image false avatar string link of the image false API charcater played hours this will return the character played hours that is saved in the databaselocal User = VorpCore.getUser(_source) print(User.hours)" }, { "title": "INVENTORY", "url": "/VORP_API-docs/posts/inventory-lua/", "categories": "Documentation Lua, INVENTORY", "tags": "Lua", "date": "2022-05-10 17:34:00 +0100", "snippet": "VORP inventory APIAPIvorp Inventory provide a custom API that allow you to interact with items as wall as creating custom inventories.Installation inventory export to be used at the top of the server side-- at the top of server filelocal VORPInv = {}VORPInv = exports.vorp_inventory:vorp_inventoryApi()Item APIYou can use the API server side to give, delete, register item utility, get quantities and even ask if the player can carry the item.Add Item-- give an itemVorpInv.addItem(source, itemName, qty, metadata) Parameter Type Description Required ? source Number The player id in game True itemName String The name of the item to add True qty Number The quantity of item to add True metadata Table An object containing all custom data of item to add False Sub Item--remove an itemVorpInv.subItem(source, itemName, qty, metadata) Parameter Type Description Required ? source Number The player id in game True itemName String The name of the item to remove True qty Number The quantity of item to remove True metadata Table An object containing all custom data of item to remove False Get Item--get item player have in inventorylocal item = VorpInv.getItem(source, itemName, metadata) Parameter Type Description Required ? source Number The player id in game True itemName String The name of the item to get True metadata Table An object containing all custom data of item to get False Return Type Description Return Table (Item) or nil An object containing all item information Get Item Count-- get the count of an item player has in inventorylocal itemCount = VorpInv.getItemCount(source, itemName, metadata) Parameter Type Description Required ? source Number The player id in game True itemName String The name of the item to get count True metadata Table An object containing all custom data of item to remove False Return Type Description Return Number The total count of selected item in player inventory Can Carry Item-- checks item limitlocal canCarry = VorpInv.canCarryItem(source, itemName, amount) Parameter Type Description Required ? source Number The player id in game True itemName String The name of the item to count True amount Number The amount of space needed in Item stack for the item to add True Return Type Description Return Boolean True if there is enough space, False if not. Can Carry Items-- checks inventory limitlocal canCarry = VorpInv.CanCarryItems(source, amount) Parameter Type Description Required ? source Number The player id in game True amount Number The amount of space needed in Inventory for the items to add True Return Type Description Return Boolean True if there is enough space, False if not. Register Usable Itemlocal itemName = \"bread\"VorpInv.RegisterUsableItem(itemName, function(data) print(data.source) -- player using the item print(data.label) -- item labelend) Parameter Type Description Required ? itemName String The name of the item to count True data Function The function that will be called True Return Type Description data.source number returns server ID data.label string returns item Lable from DB Get DB Itemlocal item = VorpInv.getDBItem(source, itemName) Parameter Type Description Required ? source Number The player id in game True itemName String The name of the item to get True Return Type Description statment true/false check if item exists in DB Weapons APIYou can use the API to add, delete and get weapons, ad, remove or get weapon bullets and components and even check if the player can carry the weapons.Add WeaponVorpInv.createWeapon(source, weaponName, ammo, comp) Parameter Type Description Required ? source Number The server player id True weaponName String The hashname of the weapon to add True ammo Table An array containing start ammo False comp Table An array containing start comp False Sub Weapon-- remove weaponVorpInv.subWeapon(source, weaponId) Parameter Type Description Required ? source Number The player id in game True weaponId Number The id of the weapon to remove DB True Give Weapon--give weapon from one player to anotherVorpInv.giveWeapon(source, weaponId, target) Parameter Type Description Required ? source Number The player id in game True weaponId Number The id of the weapon to remove True target Number The target player id in game True Add BulletsVorpInv.addBullets(source, weaponId, type, qty) Parameter Type Description Required ? source Number The player id in game True weaponId Number The id of the weapon True type String The bullet type to add True qty Number The amount of bullets to add True Sub BulletsVorpInv.subBullets(source, weaponId, type, qty) Parameter Type Description Required ? source Number The player id in game True weaponId Number The id of the weapon True type String The bullet type to remove True qty Number The amount of bullets to remove True Get Weapon Bulletslocal WeaponBullets = VorpInv.getWeaponBullets(source, weaponId) Parameter Type Description Required ? source Number The player id in game True weaponId Number The id of the weapon True Return Type Description Return Table or nil An Array containing all the loaded bullets in the weapon Get Weapon Componentslocal weaponComps = VorpInv.getWeaponComponents(source, weaponId) Parameter Type Description Required ? source Number The player id in game True weaponId Number The id of the weapon True Return Type Description Return Table or nil An Array containing all the loaded components on the weapon Get Weaponslocal weapons = VorpInv.getUserWeapons(source) Parameter Type Description Required ? source Number The player id in game True Return Type Description Return Table or nil An Array containing all the weapon of the player Get Weaponlocal weapon = VorpInv.getUserWeapon(source, weaponId) Parameter Type Description Required ? source Number The player id in game True weaponId Number The id of the weapon True Return Type Description Return Table (Weapon) or nil An Object containing all weapon information Can Carry WeaponsVorpInv.canCarryWeapons(source, amount, function(cb) --can carry weapons local canCarry = cb if canCarry then --give weapon else --cant carry endend) Parameter Type Description Required ? source Number The player id in game True amount Number The amount of space needed to carry the weapons True cb Function(canCarry) A Callback function containing a Boolean Parameter True Inventory APIYou can use the API to open or close the player Inventory, and register custom private or shared inventories.Get Inventorylocal inventory = VorpInv.getUserInventory(source)print(inventory) Parameter Type Description Required ? source Number The player id in game True Return Type Description Return Table (Item[]) or nil An Array containing all items in player Inventory Open Player Inventory-- opens source inventory to source or the invid (secondary inv) to sourceVorpInv.OpenInv(source,invID) -- to open custom inventory or play inventory Parameter Type Description Required ? source Number The player id in game True invID Number The secondary inventory ID false Close Player Inventory-- close source inv or close (secondary inv) with its IDVorpInv.CloseInv(source,invID) Parameter Type Description Required ? source Number The player id in game True invID Number The secondary inventory ID false Register InventoryVorpInv.registerInventory(id, name, limit, acceptWeapons, shared) Parameter Type Description Required ? id String The id of the custom inventory True name String The name of the custom inventory True limit Number The item limit of the custom inventory True acceptWeapons Boolean Does inventory accept weapons (Default: True) False shared Boolean Is Inventory shared across all players (Default: False) False Remove InventoryVorpInv.removeInventory(id) Parameter Type Description Required ? id String The id of the custom inventory to remove True Set Custom Inventory Item LimitVorpInv.setInventoryItemLimit(id, itemName, limit) Parameter Type Description Required ? id String The id of the custom inventory True itemName String The name of the Item True limit Number The limit for this item in the custom inventory. Set 0 to deny this item in this inventory True Set Custom Inventory Weapon LimitVorpInv.setInventoryWeaponLimit(id, weaponName, limit) Parameter Type Description Required ? id String The id of the custom inventory True weaponName String The name of the Weapon True limit Number The limit for this weapon in the custom inventory. Set 0 to deny this weapon in this inventory True " }, { "title": "METABOLISM", "url": "/VORP_API-docs/posts/metabolism-lua/", "categories": "Documentation Lua, METABOLISM", "tags": "Lua", "date": "2022-05-10 17:34:00 +0100", "snippet": "VORP METABOLISM Lua*" }, { "title": "VORP INPUTS", "url": "/VORP_API-docs/posts/inputs-lua/", "categories": "Documentation Lua, INPUTS", "tags": "Lua", "date": "2022-05-08 07:10:00 +0100", "snippet": "VORP inputs is a tool that is mandatory within the vorp framework.VORP INPUTS LUA downloadHow to useCan only be used from client side Single inputlocal button = \"Confirm\" --labellocal placeholder = \"Insert player ID\" --label TriggerEvent(\"vorpinputs:getInput\", button, placeholder, function(result) if result ~= \"\" or result then -- making sure its not empty or nil print(result) -- returs a string else print(\"its empty?\") -- notify end end)With input Type local button = \"Confirm\" local placeholder = \"Test Here\" local inputType = \"input\" -- number ,textarea , date, etc. TriggerEvent(\"vorpinputs:getInput\", button, placeholder,inputType, function(result) if result ~= \"\" or result then -- making sure its not empty or nil print(result) -- returs a string else print(\"its empty?\") -- notify end end)Advanced inputs NEWlocal myInput = { type = \"enableinput\", -- don't touch inputType = \"input\", -- input type button = \"Confirm\", -- button name placeholder = \"NAME QUANTITY\", -- placeholder name style = \"block\", -- don't touch attributes = { inputHeader = \"GIVE ITEM\", -- header type = \"text\", -- inputype text, number,date,textarea ETC pattern = \"[0-9]\", -- only numbers \"[0-9]\" | for letters only \"[A-Za-z]+\" title = \"numbers only\", -- if input doesnt match show this message style = \"border-radius: 10px; background-color: ; border:none;\"-- style }}TriggerEvent(\"vorpinputs:advancedInput\", json.encode(myInput), function(result) if result ~= \"\" and result then -- make sure its not empty or nil print(result) --returns string else print(\"it's empty?\") --notify endend)Devtipssplit a string into more than one separated by a spacelocal result = yourvariablelocal splitString = {} for i in string.gmatch(result, \"%S+\") do splitString[#splitString + 1] = i endlocal data1, data2 = splitString[1],splitString[2]print(data1,data2) -- use can use these to make sure what you want the input to be. tostring(data1) -- returns string tonumber(data2) -- returns number" }, { "title": "CHARACATERS", "url": "/VORP_API-docs/posts/characters-lua/", "categories": "Documentation Lua, CHARACTERS", "tags": "Lua", "date": "2022-05-08 04:33:00 +0100", "snippet": "VORP CHARACTERS This code gives you the players clothes and skin from the server side.-- server sideTriggerEvent(\"vorpcharacter:getPlayerComps\", _source, function(data) local json_skin = data.skins\tlocal json_cloths = data.clothsend) This gives you the players clothes and skin from the client side.It comes from the client cache.-- client sideTriggerEvent(\"vorpcharacter:getPlayerComps\", _source, function(skin, cloths) local beard = skin.Beard -- Beard is in the database \tlocal hat = cloths.Hat -- Hat is in the databaseend) This sets one component of the player skin and saves it in the database.This comes from the server side.-- server sidelocal _source = sourcelocal CompHash = \"component hash\"TriggerEvent(\"vorpcharacter:setPlayerSkinChange\", _source, \"Beard\", CompHash) This sets one component of the player clothes and saves it in the database.This comes from the server side.-- server sidelocal _source = sourcelocal CompHash = \"component hash\"TriggerEvent(\"vorpcharacter:setPlayerSkinChange\", _source, \"Hat\", CompHash) This refreshes the player skin that is saved in the client cache.--client sideTriggerEvent(\"vorpcharacter:refreshPlayerSkin\") This refreshes the player skin from the database.This comes from the client side.-- client sideTriggerServerEvent(\"vorpcharacter:getPlayerSkin\") You can get a list of components with all the clothes from vorp_character using this callback event.TriggerEvent(\"vorpcharacter:getSkinComps\", \"hats_male\", function(components) for index,value in pairs(components) do print(tostring(v)) endend) It returns a list with the componentsParameters: hats_male returns the male hats list hats_female returns the female hats list eyewear_male returns the male eyewear list eyewear_female returns the female eyewear list neckwear_male returns the male neckwear list neckwear_female returns the female neckwear list neckties_male returns the male neckties list neckties_female returns the female neckties list shirts_male returns the male shirts list shirts_female returns the female shirts list suspenders_male returns the male suspenders list suspenders_female returns the female suspenders list vests_male returns the male vests list vests_female returns the female vests list coats_male returns the male coats list coats_female returns the female coats list ponchos_male returns the male ponchos list ponchos_female returns the female ponchos list cloaks_male returns the male cloaks list cloaks_female returns the female cloaks list gloves_male returns the male gloves list gloves_female returns the female gloves list rings_rh_male returns the right hand male rings list rings_rh_female returns the right hand female rings list rings_lh_male returns the left hand male rings list rings_lh_female returns the left hand female rings list bracelets_male returns the male bracetels list bracelets_female returns the female bracelets list gunbelts_male returns the male gunbelts list gunbelts_female returns the female gunblets list belts_male returns the male belts list belts_female returns the female belts list buckles_male returns the male buckles list buckles_female returns the female buckles list holsters_s_male returns the secondary male holsters list holsters_s_female returns the secondary female holsters list pants_male returns the male pants list pants_female returns the female pants list skirts_female returns the skirts list boots_male returns the male boots list boots_female returns the female boots list chaps_male returns the male chaps list chaps_female returns the female chaps list spurs_male returns the male spurs list spurs_female returns the female spurs list hair_male returns the male hair list hair_female returns the female hair list beard_male returns the beards list teeth_male returns the male teeth list teeth_female returns the female teeth list" }, { "title": "REDM", "url": "/VORP_API-docs/posts/redm/", "categories": "", "tags": "game references", "date": "2022-05-04 00:32:00 +0100", "snippet": "REDM Game References" } ]
